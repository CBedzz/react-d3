class GraphComponent extends React.Component {
 getInitialState() {
  return {
   categories: [],
   expenses: [],
   links: []
  }
 },

 componentDidMount() {
  GraphStore.addChangeListener(this._onChange); 
  SelectionStore.addChangeListener(this._onChange);
 },
 componentWillReceiveProps(nextProps) {
  this._onChange(nextProps);
 },
 componentWillUnMount() {
  GraphStore.removeChangeListener(this._onChange);
  SelectionStore.removeChangeListener(this._onChange);
 },
 
 // use the next props to calculate and set the next state
 _onChange(props, width, height) {
  props = props || this.props;

  var selection = SelectionStore.getSelection();
  var categories = AppCalculationUtils.calculateCategories(props.data.expenses);
  var expenses = AppCalculationUtils.calculateExpenses(props.data.expenses);
  var links = AppCalculationUtils.calculateLinks(categories, expenses);

  // calculate some more rendering things
  AppCalculationUtils.calculateSizes(categories);
  AppCalculationUtils.highlightSelections(selection, categories, expenses);

  // calculate their positions
  AppCalculationUtils.positionExpenses(expenses);
  AppCalculationUtils.positionGraph(categories, expenses, links);

  var state = {categories, expenses, links, dates, width, height};
  AppCalculationUtils.calculateUpdate(this.state, state);
  this.setState(state);
 },

 render() {
  var links = this.state.links.map((link) => {
   var key = link.source.id + ‘,’ + link.target.id;
   return (<LinkComponent key={key} data={link} />);
  });
  var categories = this.state.categories.map((category) => {
   return (<CategoryComponent key={category.id} data={category} />);
  });
  var expenses = this.state.expenses.map((expense) => {
   return (<ExpenseComponent key={expense.id} data={expense} />);
  });

  return (
   <svg>
    <g className=”graph”>
     {links}
     {categories}
     {expenses}
    </g>
   </svg>
  );
 }
}
